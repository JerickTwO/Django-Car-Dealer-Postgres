jQuery.ajax = function(url, options) {
    if (typeof url === "object") {
        options = url;
        url = undefined;
    }

    options = options || {};

    var transport,
        cacheURL,
        responseHeadersString,
        responseHeaders,
        timeoutTimer,
        urlAnchor,
        completed,
        fireGlobals,
        i,
        uncached,
        s = jQuery.ajaxSetup({}, options),
        callbackContext = s.context || s,
        globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
        deferred = jQuery.Deferred(),
        completeDeferred = jQuery.Callbacks("once memory"),
        statusCode = s.statusCode || {},
        requestHeaders = {},
        requestHeadersNames = {},
        strAbort = "canceled",
        jqXHR = {
            readyState: 0,
            getResponseHeader: function(key) {
                var match;
                if (completed) {
                    if (!responseHeaders) {
                        responseHeaders = {};
                        while ((match = rheaders.exec(responseHeadersString))) {
                            responseHeaders[match[1].toLowerCase()] = match[2];
                        }
                    }
                    match = responseHeaders[key.toLowerCase()];
                }
                return match == null ? null : match;
            },
            getAllResponseHeaders: function() {
                return completed ? responseHeadersString : null;
            },
            setRequestHeader: function(name, value) {
                if (completed == null) {
                    name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                    requestHeaders[name] = value;
                }
                return this;
            },
            overrideMimeType: function(type) {
                if (completed == null) {
                    s.mimeType = type;
                }
                return this;
            },
            statusCode: function(map) {
                var code;
                if (map) {
                    if (completed) {
                        jqXHR.always(map[jqXHR.status]);
                    } else {
                        for (code in map) {
                            statusCode[code] = [statusCode[code], map[code]];
                        }
                    }
                }
                return this;
            },
            abort: function(statusText) {
                var finalText = statusText || strAbort;
                if (transport) {
                    transport.abort(finalText);
                }
                done(0, finalText);
                return this;
            }
        };

    deferred.promise(jqXHR);

    s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");

    s.type = options.method || options.type || s.method || s.type;

    s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];

    if (s.crossDomain == null) {
        urlAnchor = document.createElement("a");

        try {
            urlAnchor.href = s.url;

            urlAnchor.href = urlAnchor.href;
            s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
                urlAnchor.protocol + "//" + urlAnchor.host;
        } catch (e) {
            s.crossDomain = true;
        }
    }

    if (s.data && s.processData && typeof s.data !== "string") {
        s.data = jQuery.param(s.data, s.traditional);
    }

    inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

    if (completed) {
        return jqXHR;
    }

    fireGlobals = jQuery.event && s.global;

    if (fireGlobals && jQuery.active++ === 0) {
        jQuery.event.trigger("ajaxStart");
    }

    s.type = s.type.toUpperCase();

    s.hasContent = !rnoContent.test(s.type);

    cacheURL = s.url.replace(rhash, "");

    if (!s.hasContent) {
        uncached = s.url.slice(cacheURL.length);

        if (s.data) {
            cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;
            delete s.data;
        }

        if (s.cache === false) {
            cacheURL = cacheURL.replace(rantiCache, "$1");
            uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + (nonce.guid++) + uncached;
        }

        s.url = cacheURL + uncached;
    } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
        s.data = s.data.replace(r20, "+");
    }

    if (s.ifModified) {
        if (jQuery.lastModified[cacheURL]) {
            jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
        }
        if (jQuery.etag[cacheURL]) {
            jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
        }
    }

    if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
        jqXHR.setRequestHeader("Content-Type", s.contentType);
    }

    jqXHR.setRequestHeader(
        "Accept",
        s.dataTypes[0] && s.accepts[s.dataTypes[0]] ?
            s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") :
            s.accepts["*"]
    );

    for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
    }

    if (s.beforeSend &&
        (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
        return jqXHR.abort();
    }

    strAbort = "abort";

    completeDeferred.add(s.complete);
    jqXHR.done(s.success);
    jqXHR.fail(s.error);

    transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

    if (!transport) {
        done(-1, "No Transport");
    } else {
        jqXHR.readyState = 1;

        if (fireGlobals) {
            globalEventContext.trigger("ajaxSend", [jqXHR, s]);
        }

        if (completed) {
            return jqXHR;
        }

        if (s.async && s.timeout > 0) {
            timeoutTimer = window.setTimeout(function() {
                jqXHR.abort("timeout");
            }, s.timeout);
        }

        try {
            completed = false;
            transport.send(requestHeaders, done);
        } catch (e) {
            if (completed) {
                throw e;
            }

            done(-1, e);
        }
    }

    function done(status, nativeStatusText, responses, headers) {
        var isSuccess, success, error, response, modified,
            statusText = nativeStatusText;

        if (completed) {
            return;
        }

        completed = true;

        if (timeoutTimer) {
            window.clearTimeout(timeoutTimer);
        }

        transport = undefined;

        responseHeadersString = headers || "";

        jqXHR.readyState = status > 0 ? 4 : 0;

        isSuccess = status >= 200 && status < 300 || status === 304;

        if (responses) {
            response = ajaxHandleResponses(s, jqXHR, responses);
        }

        response = ajaxConvert(s, response, jqXHR, isSuccess);

        if (isSuccess) {
            if (s.ifModified) {
                modified = jqXHR.getResponseHeader("Last-Modified");
                if (modified) {
                    jQuery.lastModified[cacheURL] = modified;
                }
                modified = jqXHR.getResponseHeader("etag");
                if (modified) {
                    jQuery.etag[cacheURL] = modified;
                }
            }

            if (status === 204 || s.type === "HEAD") {
                statusText = "nocontent";
            } else if (status === 304) {
                statusText = "notmodified";
            } else {
                statusText = response.state;
                success = response.data;
                error = response.error;
                isSuccess = !error;
            }
        } else {
            error = statusText;
            if (status || !statusText) {
                statusText = "error";
                if (status < 0) {
                    status = 0;
                }
            }
        }

        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + "";

        if (isSuccess) {
            deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
        } else {
            deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
        }

        jqXHR.statusCode(statusCode);
        statusCode = undefined;

        if (fireGlobals) {
            globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError",
                [jqXHR, s, isSuccess ? success : error]);
        }

        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

        if (fireGlobals) {
            globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

            if (!(--jQuery.active)) {
                jQuery.event.trigger("ajaxStop");
            }
        }
    }

    return jqXHR;
};
